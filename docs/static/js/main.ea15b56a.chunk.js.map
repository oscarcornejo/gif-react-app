{"version":3,"sources":["components/AddCategory.js","config/configApi.js","helpers/getGifs.js","components/GifGridItem.js","components/GifList.js","hooks/useFetchGifs.js","App.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","items","type","value","onChange","target","handleInputChange","gifApi","axios","create","baseURL","params","api_key","getGifs","category","a","url","encodeURI","get","resp","data","gifs","map","gif","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifList","loading","state","setState","useEffect","then","catch","err","console","log","useFetchGifs","item","App","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPA+BeA,EA5BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAgBzC,OACE,uBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAYP,GAAZ,mBAA2BO,OACzCN,EAAc,MAKhB,UACE,6BAAKD,IACL,uBAAOQ,KAAK,OAAOC,MAAOT,EAAYU,SAAU,SAACP,GAAD,OAhB1B,SAACA,GACzBF,EAAcE,EAAEQ,OAAOF,OAekCG,CAAkBT,U,uCCbhEU,E,OAPAC,EAAMC,OAAO,CAC1BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCCHAC,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACfC,EADe,oBACIC,UAAUH,GADd,sBAGFP,EAAOW,IAAIF,GAHT,cAGfG,EAHe,OAIfC,EAAOD,EAAKC,KAAKA,KAEjBC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QAVjB,kBAcdK,GAdc,2CAAH,sDCOLO,EATK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAC5B,OACE,sBAAKa,UAAU,yCAAf,UACE,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCiBKO,EAlBC,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECCN,SAACA,GAAc,IAAD,EACdrB,mBAAS,CACjC2B,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAuBxC,OAjBAC,qBAAU,WACRvB,EAAQC,GACLuB,MAAK,SAAChB,GACLc,EAAS,CACPf,KAAMC,EACNY,SAAS,OAGZK,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZJ,EAAS,2BACJD,GADG,IAEND,SAAS,UAGd,CAACnB,EAAUoB,IAEPA,EDvB2BQ,CAAa5B,GAAvCmB,EADwB,EACxBA,QAAeP,EADS,EACfN,KAEjB,OACE,qCACE,oBAAIS,UAAU,oCAAd,SAAmDf,IAElDmB,GAAW,mBAAGJ,UAAU,mCAAb,2BAEZ,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACqB,GACX,OAAO,cAAC,EAAD,eAA+BA,GAAbA,EAAKnB,aEWzBoB,MApBf,WAAgB,IAAD,EACuBnD,mBAAS,CAAC,UADjC,mBACNoD,EADM,KACMrD,EADN,KAGb,OACE,gCACE,gDAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBAEA,6BACGqD,EAAWvB,KAAI,SAACqB,GACf,OAAO,cAAC,EAAD,CAAoB7B,SAAU6B,GAAhBA,YCNhBG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ea15b56a.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((items) => [inputValue, ...items]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>{inputValue}</h2>\n      <input type=\"text\" value={inputValue} onChange={(e) => handleInputChange(e)} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","import axios from \"axios\";\n\nconst gifApi = axios.create({\n  baseURL: \"https://api.giphy.com/v1/gifs\",\n  params: {\n    api_key: \"Ii4G7TeTlLIx8f8fLOK8HKMdwflwMbUK\",\n  },\n});\n\nexport default gifApi;\n","import gifApi from \"../config/configApi\";\n\nexport const getGifs = async (category) => {\n  const url = `/search?q=${encodeURI(category)}&limit=20`;\n\n  const resp = await gifApi.get(url);\n  const data = resp.data.data;\n\n  const gifs = data.map((gif) => {\n    return {\n      id: gif.id,\n      title: gif.title,\n      url: gif.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","const GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport GifGridItem from \"./GifGridItem\";\n\nconst GifList = ({ category }) => {\n  const { loading, data: images } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n      {loading && <p className=\"animate__animated animate__flash\">\"Cargando...\"</p>}\n\n      <div className=\"card-grid\">\n        {images.map((item) => {\n          return <GifGridItem key={item.id} {...item} />;\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default GifList;\n","import { useEffect, useState } from \"react\";\n\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category)\n      .then((gifs) => {\n        setState({\n          data: gifs,\n          loading: false,\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n        setState({\n          ...state,\n          loading: false,\n        });\n      });\n  }, [category, state]);\n\n  return state;\n};\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifList from \"./components/GifList\";\n\nfunction App() {\n  const [categories, setCategories] = useState([\"Honda\"]);\n\n  return (\n    <div>\n      <h2>Gif Expert App</h2>\n\n      <AddCategory setCategories={setCategories} />\n\n      <hr />\n\n      <ul>\n        {categories.map((item) => {\n          return <GifList key={item} category={item} />;\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}